{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ready to Start and Explore \u00b6 Highlights \u00b6 Prebuilt libraries and required header files packaged in archives. For several modern Visual Studio Compilers: Visual Studio 2022 - MSVC 143 Visual Studio 2019 - MSVC 142 Visual Studio 2017 - MSVC 141 - until v4.5.5 Visual Studio 2015 - MSVC 140 - until v4.5.5 For both 32- and 64-Bit architectures Convenient with all three build configurations Release , RelWithDebInfo , Debug What is code without examples - harder to understand, less practical to get stated with, and so on. Several easy starter examples from the official OpenCV project For Visual Studio 2022 and Visual Studio 2019 For older versions of Visual Studio e.g. Visual Studio 2017 and Visual Studio 2015 until version v4.5.5 Pre-configured - Can be used in seconds. Debuggable - RelWithDebInfo and Debug include symbols Requirements \u00b6 One of the compilers: Visual Studio 2022 - MSVC 143 Visual Studio 2019 - MSVC 142 For a better experience use one of the IDEs with one the upper mentioned compilers. Links \u00b6 Official website: https://github.com/thommyho/Cpp-OpenCV-Windows-PreBuilts","title":"Home"},{"location":"#ready-to-start-and-explore","text":"","title":"Ready to Start and Explore"},{"location":"#highlights","text":"Prebuilt libraries and required header files packaged in archives. For several modern Visual Studio Compilers: Visual Studio 2022 - MSVC 143 Visual Studio 2019 - MSVC 142 Visual Studio 2017 - MSVC 141 - until v4.5.5 Visual Studio 2015 - MSVC 140 - until v4.5.5 For both 32- and 64-Bit architectures Convenient with all three build configurations Release , RelWithDebInfo , Debug What is code without examples - harder to understand, less practical to get stated with, and so on. Several easy starter examples from the official OpenCV project For Visual Studio 2022 and Visual Studio 2019 For older versions of Visual Studio e.g. Visual Studio 2017 and Visual Studio 2015 until version v4.5.5 Pre-configured - Can be used in seconds. Debuggable - RelWithDebInfo and Debug include symbols","title":"Highlights"},{"location":"#requirements","text":"One of the compilers: Visual Studio 2022 - MSVC 143 Visual Studio 2019 - MSVC 142 For a better experience use one of the IDEs with one the upper mentioned compilers.","title":"Requirements"},{"location":"#links","text":"Official website: https://github.com/thommyho/Cpp-OpenCV-Windows-PreBuilts","title":"Links"},{"location":"examples/","text":"Examples \u00b6 Print OpenCV Version \u00b6 . \u251c\u2500 vs2015/ \u2502 \u251c\u2500 1_Print_Version/* \u251c\u2500 vs2017/ \u2502 \u251c\u2500 1_Print_Version/* \u251c\u2500 vs2019/ \u2502 \u251c\u2500 1_Print_Version/* \u251c\u2500 vs2022/ \u2502 \u251c\u2500 1_Print_Version/* Image Read and Display \u00b6 . \u251c\u2500 vs2015/ \u2502 \u251c\u2500 2_Image_Read_and_Display/* \u251c\u2500 vs2017/ \u2502 \u251c\u2500 2_Image_Read_and_Display/* \u251c\u2500 vs2019/ \u2502 \u251c\u2500 2_Image_Read_and_Display/* \u251c\u2500 vs2022/ \u2502 \u251c\u2500 2_Image_Read_and_Display/* Webcam Read and Display \u00b6 . \u251c\u2500 vs2015/ \u2502 \u251c\u2500 3_Image_Webcam_Read_and_Display/* \u251c\u2500 vs2017/ \u2502 \u251c\u2500 3_Image_Webcam_Read_and_Display/* \u251c\u2500 vs2019/ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* \u251c\u2500 vs2022/ \u2502 \u251c\u2500 3_Image_Webcam_Read_and_Display/* Webcam Canny Edge Detection \u00b6 . \u251c\u2500 vs2015/ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* \u251c\u2500 vs2017/ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* \u251c\u2500 vs2019/ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* \u251c\u2500 vs2022/ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* Image Traffic Sign Detection \u00b6 . \u251c\u2500 vs2015/ \u2502 \u251c\u2500 5_Image_Traffic_Sign_Detection/* \u251c\u2500 vs2017/ \u2502 \u251c\u2500 5_Image_Traffic_Sign_Detection/* \u251c\u2500 vs2019/ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* \u251c\u2500 vs2022/ \u2502 \u251c\u2500 5_Image_Traffic_Sign_Detection/*","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#print-opencv-version","text":". \u251c\u2500 vs2015/ \u2502 \u251c\u2500 1_Print_Version/* \u251c\u2500 vs2017/ \u2502 \u251c\u2500 1_Print_Version/* \u251c\u2500 vs2019/ \u2502 \u251c\u2500 1_Print_Version/* \u251c\u2500 vs2022/ \u2502 \u251c\u2500 1_Print_Version/*","title":"Print OpenCV Version"},{"location":"examples/#image-read-and-display","text":". \u251c\u2500 vs2015/ \u2502 \u251c\u2500 2_Image_Read_and_Display/* \u251c\u2500 vs2017/ \u2502 \u251c\u2500 2_Image_Read_and_Display/* \u251c\u2500 vs2019/ \u2502 \u251c\u2500 2_Image_Read_and_Display/* \u251c\u2500 vs2022/ \u2502 \u251c\u2500 2_Image_Read_and_Display/*","title":"Image Read and Display"},{"location":"examples/#webcam-read-and-display","text":". \u251c\u2500 vs2015/ \u2502 \u251c\u2500 3_Image_Webcam_Read_and_Display/* \u251c\u2500 vs2017/ \u2502 \u251c\u2500 3_Image_Webcam_Read_and_Display/* \u251c\u2500 vs2019/ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* \u251c\u2500 vs2022/ \u2502 \u251c\u2500 3_Image_Webcam_Read_and_Display/*","title":"Webcam Read and Display"},{"location":"examples/#webcam-canny-edge-detection","text":". \u251c\u2500 vs2015/ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* \u251c\u2500 vs2017/ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* \u251c\u2500 vs2019/ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* \u251c\u2500 vs2022/ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/*","title":"Webcam Canny Edge Detection"},{"location":"examples/#image-traffic-sign-detection","text":". \u251c\u2500 vs2015/ \u2502 \u251c\u2500 5_Image_Traffic_Sign_Detection/* \u251c\u2500 vs2017/ \u2502 \u251c\u2500 5_Image_Traffic_Sign_Detection/* \u251c\u2500 vs2019/ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* \u251c\u2500 vs2022/ \u2502 \u251c\u2500 5_Image_Traffic_Sign_Detection/*","title":"Image Traffic Sign Detection"},{"location":"faq/","text":"","title":"FAQ"},{"location":"steps/","text":"Getting started \u00b6 Download \u00b6 Navigate to the repository On the landing page select your desired OpenCV version Or use following release table Version Build-Info All Build-Configurations Examples 4.12.0 ( latest) link 4.11.0 link 4.10.0 link 4.9.0 link 4.8.0 link 4.7.0 link 4.6.0 link 4.5.5 link 4.5.4 link The precompiled libraries are attached as assets compressed in zip archives to the bottom of the page. Please check the Build-Info for the included OpenCV modules Success Downloaded one or more archives e.g.: MSVC142_64.zip . Downloaded the corresponding Examples.zip of the release. Unpack the archives \u00b6 If you completed the task, proceed as follows to this project setup . \u251c\u2500 vs2015/ # -> From Examples.zip - Directory containing project files (organize source code files and other resources) for Visual Studio 2015 \u251c\u2500 vs2017/ # -> From Examples.zip - Directory containing project files (organize source code files and other resources) for Visual Studio 2017 \u251c\u2500 vs2019/ # -> From Examples.zip - Directory containing project files (organize source code files and other resources) for Visual Studio 2019 \u251c\u2500 vs2022/ # -> From Examples.zip - Directory containing project files (organize source code files and other resources) for Visual Studio 2022 \u251c\u2500 MSVC140_32/ # -> From MSC140_32.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2015 targeting 32-bit \u251c\u2500 MSVC140_64/ # -> From MSC140_64.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2015 targeting 64-bit \u251c\u2500 MSVC140_32/ # -> From MSC141_32.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2017 targeting 32-bit \u251c\u2500 MSVC140_64/ # -> From MSC141_64.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2017 targeting 64-bit \u251c\u2500 MSVC142_32/ # -> From MSC142_32.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2019 targeting 64-bit \u251c\u2500 MSVC142_64/ # -> From MSC142_64.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2019 targeting 64-bit \u251c\u2500 MSVC143_32/ # -> From MSC143_32.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2022 targeting 32-bit \u251c\u2500 MSVC143_64/ # -> From MSC143_64.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2022 targeting 64-bit \u251c\u2500 .gitattributes # Can be ignored. \u251c\u2500 .gitignore # Can be ignored. \u2514\u2500 README.md # Can be ingored. Build Examples \u00b6 The project setup \u00b6 Place for holding the Visual Studio Examples source code is following git repository In every directory there is solution file with Examples_<vs_compiler_name>.sln and other directories holding the wanted examples, required project, configuration and resource files. For e.g. vs2019 the directory-file-tree looks like that . \u251c\u2500 vs2019/ \u2502 \u251c\u2500 0_HelperScripts/* # Contains required helper projects e.g. copying files \u2502 \u251c\u2500 1_Print_Version/* # Contains project files and source code for this example \u2502 \u251c\u2500 2_Image_Read_and_Display/* # ~ \u2502 \u251c\u2500 3_Image_Webcam_Read_and_Display/* # ~ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* # ~ \u2502 \u251c\u2500 OpenCV_PropertySheet/* # Contains the property sheet for easy including the required compile and linking dependencies \u2502 \u251c\u2500 res/* # Contains required files for specific examples. \u2502 \u2514\u2500 Examples_vs2019.sln # The solution file including and organizing all the example projects Using Visual Studio IDE \u00b6 Please make sure that you have the correct/any build tools installed. Open the Examples_<vs_compiler_name>.sln with the required IDE version. If everything was correctly placed (unpacked), no error popup will appear . For further help checkout the FAQ or create an issue. And it will look this snapshot using VS 2019 IDE. Click Examples_<vs_compiler_name> and choose Build Solution or simply use the shortcut Ctrl + Shift + B to build all examples. Success Output Directory The output layout follows this scheme . \u2514\u2500 _out_/ \u2514\u2500 <architecture>/ # x64 or x86 \u2514\u2500 <build configuration>/ # Debug, Release or RelWithDebInfo \u2514\u2500 <All the examples>/* # binares and ressources","title":"In three steps"},{"location":"steps/#getting-started","text":"","title":"Getting started"},{"location":"steps/#download","text":"Navigate to the repository On the landing page select your desired OpenCV version Or use following release table Version Build-Info All Build-Configurations Examples 4.12.0 ( latest) link 4.11.0 link 4.10.0 link 4.9.0 link 4.8.0 link 4.7.0 link 4.6.0 link 4.5.5 link 4.5.4 link The precompiled libraries are attached as assets compressed in zip archives to the bottom of the page. Please check the Build-Info for the included OpenCV modules Success Downloaded one or more archives e.g.: MSVC142_64.zip . Downloaded the corresponding Examples.zip of the release.","title":"Download"},{"location":"steps/#unpack-the-archives","text":"If you completed the task, proceed as follows to this project setup . \u251c\u2500 vs2015/ # -> From Examples.zip - Directory containing project files (organize source code files and other resources) for Visual Studio 2015 \u251c\u2500 vs2017/ # -> From Examples.zip - Directory containing project files (organize source code files and other resources) for Visual Studio 2017 \u251c\u2500 vs2019/ # -> From Examples.zip - Directory containing project files (organize source code files and other resources) for Visual Studio 2019 \u251c\u2500 vs2022/ # -> From Examples.zip - Directory containing project files (organize source code files and other resources) for Visual Studio 2022 \u251c\u2500 MSVC140_32/ # -> From MSC140_32.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2015 targeting 32-bit \u251c\u2500 MSVC140_64/ # -> From MSC140_64.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2015 targeting 64-bit \u251c\u2500 MSVC140_32/ # -> From MSC141_32.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2017 targeting 32-bit \u251c\u2500 MSVC140_64/ # -> From MSC141_64.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2017 targeting 64-bit \u251c\u2500 MSVC142_32/ # -> From MSC142_32.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2019 targeting 64-bit \u251c\u2500 MSVC142_64/ # -> From MSC142_64.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2019 targeting 64-bit \u251c\u2500 MSVC143_32/ # -> From MSC143_32.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2022 targeting 32-bit \u251c\u2500 MSVC143_64/ # -> From MSC143_64.zip - Directory containing the prebuilt libraries and header files for Visual Studio 2022 targeting 64-bit \u251c\u2500 .gitattributes # Can be ignored. \u251c\u2500 .gitignore # Can be ignored. \u2514\u2500 README.md # Can be ingored.","title":"Unpack the archives"},{"location":"steps/#build-examples","text":"","title":"Build Examples"},{"location":"steps/#the-project-setup","text":"Place for holding the Visual Studio Examples source code is following git repository In every directory there is solution file with Examples_<vs_compiler_name>.sln and other directories holding the wanted examples, required project, configuration and resource files. For e.g. vs2019 the directory-file-tree looks like that . \u251c\u2500 vs2019/ \u2502 \u251c\u2500 0_HelperScripts/* # Contains required helper projects e.g. copying files \u2502 \u251c\u2500 1_Print_Version/* # Contains project files and source code for this example \u2502 \u251c\u2500 2_Image_Read_and_Display/* # ~ \u2502 \u251c\u2500 3_Image_Webcam_Read_and_Display/* # ~ \u2502 \u251c\u2500 4_Image_Webcam_Canny_Detection/* # ~ \u2502 \u251c\u2500 OpenCV_PropertySheet/* # Contains the property sheet for easy including the required compile and linking dependencies \u2502 \u251c\u2500 res/* # Contains required files for specific examples. \u2502 \u2514\u2500 Examples_vs2019.sln # The solution file including and organizing all the example projects","title":"The project setup"},{"location":"steps/#using-visual-studio-ide","text":"Please make sure that you have the correct/any build tools installed. Open the Examples_<vs_compiler_name>.sln with the required IDE version. If everything was correctly placed (unpacked), no error popup will appear . For further help checkout the FAQ or create an issue. And it will look this snapshot using VS 2019 IDE. Click Examples_<vs_compiler_name> and choose Build Solution or simply use the shortcut Ctrl + Shift + B to build all examples. Success Output Directory The output layout follows this scheme . \u2514\u2500 _out_/ \u2514\u2500 <architecture>/ # x64 or x86 \u2514\u2500 <build configuration>/ # Debug, Release or RelWithDebInfo \u2514\u2500 <All the examples>/* # binares and ressources","title":"Using Visual Studio IDE "}]}